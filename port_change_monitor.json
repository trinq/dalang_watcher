{
  "name": "Port Change Monitor",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hour": 6
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "requestMethod": "GET",
        "url": "http://asm_api:5000/api/results?target=192.168.1.1",
        "options": {}
      },
      "name": "Get Current Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get yesterday's date\nconst yesterday = new Date();\nyesterday.setDate(yesterday.getDate() - 1);\nconst yesterdayStr = yesterday.toISOString().split('T')[0];\n\n// Filter for yesterday's data\nconst currentResults = $input.item(0).json;\nconst currentPorts = [];\n\n// Extract current open ports\nfor (const result of currentResults) {\n  if (result.status === 'Open') {\n    currentPorts.push({\n      port: result.port,\n      protocol: result.protocol\n    });\n  }\n}\n\n// Set previous scan results as a node variable to compare later\n$node.previousPorts = JSON.stringify(currentPorts);\n\nreturn [{json: {currentPorts}}];"
      },
      "name": "Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Compare with previous scan if available\nlet previousPorts = [];\nif ($node.previousPorts) {\n  previousPorts = JSON.parse($node.previousPorts);\n}\n\nconst currentPorts = $input.item(0).json.currentPorts;\n\n// Find new ports\nconst newPorts = currentPorts.filter(current => {\n  return !previousPorts.some(prev => \n    prev.port === current.port && prev.protocol === current.protocol\n  );\n});\n\n// Find closed ports\nconst closedPorts = previousPorts.filter(prev => {\n  return !currentPorts.some(current => \n    current.port === prev.port && current.protocol === prev.protocol\n  );\n});\n\nreturn [{\n  json: {\n    newPorts,\n    closedPorts,\n    hasChanges: newPorts.length > 0 || closedPorts.length > 0\n  }\n}];"
      },
      "name": "Compare Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"hasChanges\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "subject": "Port Changes Detected",
        "html": "<h1>ASM Port Change Alert</h1>\n<p>Changes were detected in the attack surface:</p>\n\n<h2>New Open Ports</h2>\n<table>\n  <tr>\n    <th>Port</th>\n    <th>Protocol</th>\n  </tr>\n  {{#each $json[\"newPorts\"]}}\n  <tr>\n    <td>{{this.port}}</td>\n    <td>{{this.protocol}}</td>\n  </tr>\n  {{/each}}\n  {{#if $json[\"newPorts\"].length === 0}}\n  <tr>\n    <td colspan=\"2\">None</td>\n  </tr>\n  {{/if}}\n</table>\n\n<h2>Closed Ports</h2>\n<table>\n  <tr>\n    <th>Port</th>\n    <th>Protocol</th>\n  </tr>\n  {{#each $json[\"closedPorts\"]}}\n  <tr>\n    <td>{{this.port}}</td>\n    <td>{{this.protocol}}</td>\n  </tr>\n  {{/each}}\n  {{#if $json[\"closedPorts\"].length === 0}}\n  <tr>\n    <td colspan=\"2\">None</td>\n  </tr>\n  {{/if}}\n</table>",
        "options": {}
      },
      "name": "Send Alert Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1250,
        180
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Current Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Results": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Compare Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Results": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "Send Alert Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "9a8b7c6d5e4f3g2h1i0j",
  "id": "2",
  "meta": {
    "instanceId": "123456789012345678"
  }
}